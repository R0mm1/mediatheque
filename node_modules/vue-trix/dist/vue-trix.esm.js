import Vue from 'vue';
import 'trix';
import 'trix/dist/trix.css';

/**
 * Persist editor's state
 */
function SaveEditorState (component) {
  return {
    methods: {
      // Save editor data with elementId
      saveAllEditorData () {
        localStorage.setItem(this.storageId(), JSON.stringify(this.$refs.trix.editor));
      },
      storageId () {
        if (this.$props.inputId) {
          return `${component}.${this.$props.inputId}.content`
        } else {
          return `${component}.content`
        }
      }
    },
    beforeDestroy () {
      this.saveAllEditorData();
    },
    mounted () {
      const savedValue = localStorage.getItem(this.storageId());
      if (savedValue && !this.$props.initContent) {
        this.$refs.trix.editor.loadJSON(JSON.parse(savedValue));
      }
    },
    watch: {
      initContent: function (val) {
        localStorage.setItem(this.storageId(), JSON.stringify(this.$refs.trix.editor));
      }
    }
  }
}

/**
 *
 * @param {*} component
 */
function EmitDroppedFile (component) {
  return {
    methods: {
      emitHandleFile (file) {
        this.$emit('trix-file-accept', file);
      }
    }
  }
}

//
Vue.config.ignoredElements = ['trix-editor'];

var script = {
  name: 'VueTrix',
  mixins: [
    SaveEditorState('VueTrixEditor'),
    EmitDroppedFile('VueTrixEditor')
  ],
  model: {
    prop: 'initContent',
    event: 'update'
  },
  props: {
    inputId: {
      type: String,
      required: false,
      default () {
        return ''
      }
    },
    initContent: {
      type: String,
      required: false,
      default () {
        return ''
      }
    }
  },
  methods: {
    update (event) {
      this.$emit('update', event.srcElement.innerHTML);
    }
  },
  computed: {
    randomId () {
      let text = '';
      let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

      for (let i = 0; i < 10; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
      }
      return text
    }
  }
};

/* script */
            const __vue_script__ = script;
            
/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    { staticClass: "trix-container" },
    [
      _c("trix-editor", {
        ref: "trix",
        staticClass: "trix-content",
        attrs: { input: _vm.inputId || _vm.randomId },
        on: {
          "trix-change": _vm.update,
          "trix-file-accept": _vm.emitHandleFile
        }
      }),
      _vm._v(" "),
      _c("input", {
        attrs: {
          type: "hidden",
          name: "content",
          id: _vm.inputId || _vm.randomId
        },
        domProps: { value: _vm.initContent }
      })
    ],
    1
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = function (inject) {
    if (!inject) return
    inject("data-v-7a2e8b72_0", { source: "\n.trix-container[data-v-7a2e8b72] {\n  max-width: 100%;\n  height: auto;\n}\n\n/*# sourceMappingURL=VueTrix.vue.map */", map: {"version":3,"sources":["/home/chicky/side_proj/vue_workspace/vue-trix/src/components/VueTrix.vue","VueTrix.vue"],"names":[],"mappings":";AAuEA;EACA,gBAAA;EACA,aAAA;CACA;;ACtEA,uCAAuC","file":"VueTrix.vue","sourcesContent":[null,".trix-container {\n  max-width: 100%;\n  height: auto; }\n\n/*# sourceMappingURL=VueTrix.vue.map */"]}, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__ = "data-v-7a2e8b72";
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* component normalizer */
  function __vue_normalize__(
    template, style, script$$1,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    const component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/home/chicky/side_proj/vue_workspace/vue-trix/src/components/VueTrix.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    {
      let hook;
      if (style) {
        hook = function(context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook !== undefined) {
        if (component.functional) {
          // register for functional component in vue file
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context)
          };
        } else {
          // inject component registration as beforeCreate hook
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }

    return component
  }
  /* style inject */
  function __vue_create_injector__() {
    const head = document.head || document.getElementsByTagName('head')[0];
    const styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
    const isOldIE =
      typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) return // SSR styles are present.

      const group = isOldIE ? css.media || 'default' : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;

        style.ids.push(id);

        if (isOldIE) {
          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
        }

        if (!style.element) {
          const el = style.element = document.createElement('style');
          el.type = 'text/css';

          if (css.media) el.setAttribute('media', css.media);
          if (isOldIE) {
            el.setAttribute('data-group', group);
            el.setAttribute('data-next-index', '0');
          }

          head.appendChild(el);
        }

        if (isOldIE) {
          index = parseInt(style.element.getAttribute('data-next-index'));
          style.element.setAttribute('data-next-index', index + 1);
        }

        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts
            .filter(Boolean)
            .join('\n');
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index]) style.element.removeChild(nodes[index]);
          if (nodes.length) style.element.insertBefore(textNode, nodes[index]);
          else style.element.appendChild(textNode);
        }
      }
    }
  }
  /* style inject SSR */
  

  
  var VueTrix = __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    __vue_create_injector__,
    undefined
  );

export default VueTrix;
